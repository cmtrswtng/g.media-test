#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Postman —Ç–µ—Å—Ç–æ–≤
 * –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Newman: npm install -g newman
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  collectionPath: path.join(__dirname, 'postman_collection.json'),
  environmentPath: path.join(__dirname, 'postman_environment.json'),
  resultsDir: path.join(__dirname, 'results'),
  reportsDir: path.join(__dirname, 'reports')
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = {
  info: (msg) => console.log(`${colors.blue}‚Ñπ${colors.reset} ${msg}`),
  success: (msg) => console.log(`${colors.green}‚úì${colors.reset} ${msg}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†${colors.reset} ${msg}`),
  error: (msg) => console.log(`${colors.red}‚úó${colors.reset} ${msg}`),
  header: (msg) => console.log(`\n${colors.bright}${colors.cyan}${msg}${colors.reset}`)
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkDependencies() {
  try {
    execSync('newman --version', { stdio: 'pipe' });
    log.success('Newman CLI –Ω–∞–π–¥–µ–Ω');
  } catch (error) {
    log.error('Newman CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g newman');
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
function checkFiles() {
  const files = [
    { path: config.collectionPath, name: 'Postman Collection' },
    { path: config.environmentPath, name: 'Postman Environment' }
  ];

  files.forEach(file => {
    if (fs.existsSync(file.path)) {
      log.success(`${file.name} –Ω–∞–π–¥–µ–Ω: ${file.path}`);
    } else {
      log.error(`${file.name} –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.path}`);
      process.exit(1);
    }
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function createDirectories() {
  const dirs = [config.resultsDir, config.reportsDir];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      log.info(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
function runTests() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const resultsFile = path.join(config.resultsDir, `test-results-${timestamp}.json`);
  const htmlReport = path.join(config.reportsDir, `report-${timestamp}.html`);

  log.header('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Postman');

  const command = [
    'newman',
    'run', config.collectionPath,
    '--environment', config.environmentPath,
    '--reporters', 'cli,json,html',
    '--reporter-json-export', resultsFile,
    '--reporter-html-export', htmlReport,
    '--bail'
  ].join(' ');

  try {
    log.info('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞:');
    console.log(`  ${command}\n`);
    
    const result = execSync(command, { 
      stdio: 'inherit',
      encoding: 'utf8'
    });

    log.success('–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    log.info(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsFile}`);
    log.info(`HTML –æ—Ç—á–µ—Ç: ${htmlReport}`);

    return true;
  } catch (error) {
    log.error('–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
    return false;
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function analyzeResults() {
  const resultsFiles = fs.readdirSync(config.resultsDir)
    .filter(file => file.endsWith('.json'))
    .sort()
    .reverse();

  if (resultsFiles.length === 0) {
    log.warning('–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  const latestResultsFile = path.join(config.resultsDir, resultsFiles[0]);
  
  try {
    const results = JSON.parse(fs.readFileSync(latestResultsFile, 'utf8'));
    
    log.header('üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤');
    
    const stats = results.run.stats;
    const failedTests = stats.assertions.failed;

    if (failedTests > 0) {
      log.warning('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    } else {
      log.success('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    }

  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  log.header('üß™ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã Postman');
  
  try {
    checkDependencies();
    checkFiles();
    createDirectories();
    
    const success = runTests();
    
    if (success) {
      analyzeResults();
    } else {
      process.exit(1);
    }
    
  } catch (error) {
    log.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  runTests,
  analyzeResults,
  config
}; 